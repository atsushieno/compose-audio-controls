package org.androidaudioplugin.composeaudiocontrols {

  public final class DiatonicKeyboardKt {
    method @androidx.compose.runtime.Composable public static void DiatonicKeyboard(optional @NonNull java.util.List<java.lang.Long> noteOnStates, optional @NonNull androidx.compose.ui.Modifier modifier, optional @NonNull kotlin.jvm.functions.Function2<? super java.lang.Integer,? super java.lang.Long,kotlin.Unit> onNoteOn, optional @NonNull kotlin.jvm.functions.Function2<? super java.lang.Integer,? super java.lang.Long,kotlin.Unit> onNoteOff, optional @NonNull kotlin.jvm.functions.Function3<? super org.androidaudioplugin.composeaudiocontrols.DiatonicKeyboardNoteExpressionOrigin,? super java.lang.Integer,? super java.lang.Float,kotlin.Unit> onExpression, optional @NonNull org.androidaudioplugin.composeaudiocontrols.DiatonicKeyboardMoveAction moveAction, optional int octaveZeroBased, optional int numWhiteKeys, optional int expressionDragSensitivity, optional float whiteKeyWidth, optional float blackKeyHeight, optional @Nullable androidx.compose.ui.unit.Dp totalWidth, optional float totalHeight, optional long whiteNoteOnColor, optional long blackNoteOnColor, optional long whiteKeyColor, optional long blackKeyColor);
    method @androidx.compose.runtime.Composable public static void DiatonicKeyboardWithControllers(optional @NonNull java.util.List<java.lang.Long> noteOnStates, optional @NonNull androidx.compose.ui.Modifier modifier, optional @NonNull kotlin.jvm.functions.Function2<? super java.lang.Integer,? super java.lang.Long,kotlin.Unit> onNoteOn, optional @NonNull kotlin.jvm.functions.Function2<? super java.lang.Integer,? super java.lang.Long,kotlin.Unit> onNoteOff, optional @NonNull kotlin.jvm.functions.Function3<? super org.androidaudioplugin.composeaudiocontrols.DiatonicKeyboardNoteExpressionOrigin,? super java.lang.Integer,? super java.lang.Float,kotlin.Unit> onExpression, optional boolean showNoteExpressionToggle, optional boolean showExpressionSensitivitySlider, optional boolean showOctaveSlider, optional @NonNull org.androidaudioplugin.composeaudiocontrols.DiatonicKeyboardMoveAction initialMoveAction, optional int initialOctaveZeroBased, optional int numWhiteKeys, optional int initialExpressionDragSensitivity, optional float whiteKeyWidth, optional float blackKeyHeight, optional @Nullable androidx.compose.ui.unit.Dp totalWidth, optional float totalHeight, optional long whiteNoteOnColor, optional long blackNoteOnColor, optional long whiteKeyColor, optional long blackKeyColor);
  }

  public enum DiatonicKeyboardMoveAction {
    method @NonNull public static org.androidaudioplugin.composeaudiocontrols.DiatonicKeyboardMoveAction valueOf(@NonNull String name) throws java.lang.IllegalArgumentException;
    method @NonNull public static org.androidaudioplugin.composeaudiocontrols.DiatonicKeyboardMoveAction[] values();
    enum_constant public static final org.androidaudioplugin.composeaudiocontrols.DiatonicKeyboardMoveAction NoteChange;
    enum_constant public static final org.androidaudioplugin.composeaudiocontrols.DiatonicKeyboardMoveAction NoteExpression;
  }

  public enum DiatonicKeyboardNoteExpressionOrigin {
    method @NonNull public static org.androidaudioplugin.composeaudiocontrols.DiatonicKeyboardNoteExpressionOrigin valueOf(@NonNull String name) throws java.lang.IllegalArgumentException;
    method @NonNull public static org.androidaudioplugin.composeaudiocontrols.DiatonicKeyboardNoteExpressionOrigin[] values();
    enum_constant public static final org.androidaudioplugin.composeaudiocontrols.DiatonicKeyboardNoteExpressionOrigin HorizontalDragging;
    enum_constant public static final org.androidaudioplugin.composeaudiocontrols.DiatonicKeyboardNoteExpressionOrigin Pressure;
    enum_constant public static final org.androidaudioplugin.composeaudiocontrols.DiatonicKeyboardNoteExpressionOrigin VerticalDragging;
  }

  public final class ImageStripKnobKt {
    method @androidx.compose.runtime.Composable public static void DefaultKnobTooltip(optional @NonNull androidx.compose.ui.Modifier modifier, boolean showTooltip, float value, optional long textColor);
    method @androidx.compose.runtime.Composable public static void ImageStripKnob(optional @NonNull androidx.compose.ui.Modifier modifier, @NonNull androidx.compose.ui.graphics.ImageBitmap imageBitmap, optional float value, optional @NonNull kotlin.ranges.ClosedFloatingPointRange<java.lang.Float> valueRange, optional @Nullable androidx.compose.ui.unit.Dp explicitSizeInDp, optional float minSizeInDp, optional int fineModeDelayMs, optional long tooltipColor, optional @NonNull kotlin.jvm.functions.Function1<? super org.androidaudioplugin.composeaudiocontrols.ImageStripKnobScope,kotlin.Unit> tooltip, optional @NonNull kotlin.jvm.functions.Function1<? super java.lang.Float,kotlin.Unit> onValueChange);
    method public static float getDefaultKnobMinSizeInDp();
    property public static final float defaultKnobMinSizeInDp;
  }

  @androidx.compose.foundation.layout.LayoutScopeMarker @androidx.compose.runtime.Immutable public interface ImageStripKnobScope {
    method public boolean getKnobIsBeingDragged();
    method public float getKnobValue();
    property public abstract boolean knobIsBeingDragged;
    property public abstract float knobValue;
  }

  public final class ImageStripKnob_androidKt {
    method @androidx.compose.runtime.Composable public static void ImageStripKnob(optional @NonNull androidx.compose.ui.Modifier modifier, @DrawableRes int drawableResId, optional float value, optional @NonNull kotlin.ranges.ClosedFloatingPointRange<java.lang.Float> valueRange, optional @Nullable androidx.compose.ui.unit.Dp explicitSizeInDp, optional float minSizeInDp, optional int fineModeDelayMs, optional long tooltipColor, optional @NonNull kotlin.jvm.functions.Function1<? super org.androidaudioplugin.composeaudiocontrols.ImageStripKnobScope,kotlin.Unit> tooltip, optional @NonNull kotlin.jvm.functions.Function1<? super java.lang.Float,kotlin.Unit> onValueChange);
  }

  public final class ScalingPainter extends androidx.compose.ui.graphics.painter.Painter {
    ctor public ScalingPainter(@NonNull androidx.compose.ui.graphics.ImageBitmap image, optional long srcOffset, optional long srcSize, optional float scale);
    method public long getIntrinsicSize();
    method protected void onDraw(@NonNull androidx.compose.ui.graphics.drawscope.DrawScope);
    property public long intrinsicSize;
  }

}

