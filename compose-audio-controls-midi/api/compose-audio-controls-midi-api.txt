package org.androidaudioplugin.composeaudiocontrols.midi {

  public final class ControlSettings {
    ctor public ControlSettings(optional @NonNull String prefix, optional boolean sendEvent, optional @NonNull kotlin.ranges.IntRange range);
    method @NonNull public String component1();
    method public boolean component2();
    method @NonNull public kotlin.ranges.IntRange component3();
    method @NonNull public org.androidaudioplugin.composeaudiocontrols.midi.ControlSettings copy(@NonNull String prefix, boolean sendEvent, @NonNull kotlin.ranges.IntRange range);
    method @NonNull public String getPrefix();
    method @NonNull public kotlin.ranges.IntRange getRange();
    method public boolean getSendEvent();
    property @NonNull public final String prefix;
    property @NonNull public final kotlin.ranges.IntRange range;
    property public final boolean sendEvent;
  }

  public final class ControlTargetDefinition {
    ctor public ControlTargetDefinition(@NonNull String label, int status, @NonNull org.androidaudioplugin.composeaudiocontrols.midi.ControlSettings control1, optional @NonNull org.androidaudioplugin.composeaudiocontrols.midi.ControlSettings control2, optional @NonNull org.androidaudioplugin.composeaudiocontrols.midi.ControlSettings control3);
    method @NonNull public String component1();
    method public int component2();
    method @NonNull public org.androidaudioplugin.composeaudiocontrols.midi.ControlSettings component3();
    method @NonNull public org.androidaudioplugin.composeaudiocontrols.midi.ControlSettings component4();
    method @NonNull public org.androidaudioplugin.composeaudiocontrols.midi.ControlSettings component5();
    method @NonNull public org.androidaudioplugin.composeaudiocontrols.midi.ControlTargetDefinition copy(@NonNull String label, int status, @NonNull org.androidaudioplugin.composeaudiocontrols.midi.ControlSettings control1, @NonNull org.androidaudioplugin.composeaudiocontrols.midi.ControlSettings control2, @NonNull org.androidaudioplugin.composeaudiocontrols.midi.ControlSettings control3);
    method @NonNull public org.androidaudioplugin.composeaudiocontrols.midi.ControlSettings getControl1();
    method @NonNull public org.androidaudioplugin.composeaudiocontrols.midi.ControlSettings getControl2();
    method @NonNull public org.androidaudioplugin.composeaudiocontrols.midi.ControlSettings getControl3();
    method @NonNull public String getLabel();
    method public int getStatus();
    property @NonNull public final org.androidaudioplugin.composeaudiocontrols.midi.ControlSettings control1;
    property @NonNull public final org.androidaudioplugin.composeaudiocontrols.midi.ControlSettings control2;
    property @NonNull public final org.androidaudioplugin.composeaudiocontrols.midi.ControlSettings control3;
    property @NonNull public final String label;
    property public final int status;
  }

  public final class DiatonicLiveMidiKeyboardKt {
    method @androidx.compose.runtime.Composable public static void DiatonicLiveMidiKeyboard(@NonNull org.androidaudioplugin.composeaudiocontrols.midi.MidiDeviceAccessScope);
  }

  public final class KtMidiDeviceAccessScope implements org.androidaudioplugin.composeaudiocontrols.midi.MidiDeviceAccessScope {
    ctor public KtMidiDeviceAccessScope(@NonNull dev.atsushieno.ktmidi.MidiAccess access, optional boolean alwaysSendToDispatchers);
    method public void cleanup();
    method @NonNull public dev.atsushieno.ktmidi.MidiAccess getAccess();
    method public boolean getAlwaysSendToDispatchers();
    method @NonNull public dev.atsushieno.ktmidi.Midi1Machine getMidi1Machine();
    method @NonNull public dev.atsushieno.ktmidi.Midi2Machine getMidi2Machine();
    method @NonNull public java.util.List<dev.atsushieno.ktmidi.MidiPortDetails> getOutputs();
    method @NonNull public kotlin.jvm.functions.Function4<byte[],java.lang.Integer,java.lang.Integer,java.lang.Long,kotlin.Unit> getSend();
    method public boolean getUseMidi2Protocol();
    method public void onMidiProtocolChange(boolean useMidi2);
    method public void onSelectionChange(int index);
    property @NonNull public final dev.atsushieno.ktmidi.MidiAccess access;
    property public final boolean alwaysSendToDispatchers;
    property @NonNull public dev.atsushieno.ktmidi.Midi1Machine midi1Machine;
    property @NonNull public dev.atsushieno.ktmidi.Midi2Machine midi2Machine;
    property @NonNull public java.util.List<dev.atsushieno.ktmidi.MidiPortDetails> outputs;
    property @NonNull public kotlin.jvm.functions.Function4<byte[],java.lang.Integer,java.lang.Integer,java.lang.Long,kotlin.Unit> send;
    property public boolean useMidi2Protocol;
  }

  public interface MidiDeviceAccessScope {
    method public void cleanup();
    method @NonNull public dev.atsushieno.ktmidi.Midi1Machine getMidi1Machine();
    method @NonNull public dev.atsushieno.ktmidi.Midi2Machine getMidi2Machine();
    method @NonNull public java.util.List<dev.atsushieno.ktmidi.MidiPortDetails> getOutputs();
    method @NonNull public kotlin.jvm.functions.Function4<byte[],java.lang.Integer,java.lang.Integer,java.lang.Long,kotlin.Unit> getSend();
    method public boolean getUseMidi2Protocol();
    method public void onMidiProtocolChange(boolean useMidi2);
    method public void onSelectionChange(int index);
    property @NonNull public abstract dev.atsushieno.ktmidi.Midi1Machine midi1Machine;
    property @NonNull public abstract dev.atsushieno.ktmidi.Midi2Machine midi2Machine;
    property @NonNull public abstract java.util.List<dev.atsushieno.ktmidi.MidiPortDetails> outputs;
    property @NonNull public abstract kotlin.jvm.functions.Function4<byte[],java.lang.Integer,java.lang.Integer,java.lang.Long,kotlin.Unit> send;
    property public abstract boolean useMidi2Protocol;
  }

  public final class MidiDeviceConfiguratorKt {
    method @androidx.compose.runtime.Composable public static void KtMidiDeviceSelector(optional @NonNull androidx.compose.ui.Modifier modifier, int selectedMidiDeviceIndex, @NonNull java.util.List<? extends dev.atsushieno.ktmidi.MidiPortDetails> midiOutDeviceList, optional @NonNull kotlin.jvm.functions.Function1<? super java.lang.Integer,kotlin.Unit> onSelectionChange);
    method @androidx.compose.runtime.Composable public static void MidiDeviceConfigurator(@NonNull org.androidaudioplugin.composeaudiocontrols.midi.MidiDeviceAccessScope);
  }

  public final class MidiKeyboardInputDispatcher {
    method @NonNull public java.util.List<kotlin.jvm.functions.Function4<byte[],java.lang.Integer,java.lang.Integer,java.lang.Long,kotlin.Unit>> getSenders();
    property @NonNull public final java.util.List<kotlin.jvm.functions.Function4<byte[],java.lang.Integer,java.lang.Integer,java.lang.Long,kotlin.Unit>> senders;
    field @NonNull public static final org.androidaudioplugin.composeaudiocontrols.midi.MidiKeyboardInputDispatcher INSTANCE;
  }

  public final class MidiKeyboardInputDispatcherKt {
  }

  public final class MidiKeyboardMainKt {
    method @Deprecated @androidx.compose.runtime.Composable public static void MidiKeyboardMain(@NonNull dev.atsushieno.ktmidi.MidiAccess access);
    method @androidx.compose.runtime.Composable public static void MidiKeyboardMain(@NonNull dev.atsushieno.ktmidi.MidiAccess access, optional @Nullable androidx.compose.ui.graphics.ImageBitmap showControllerComboWithBitmap);
    method @Deprecated @androidx.compose.runtime.Composable public static void MidiKeyboardMain(@NonNull org.androidaudioplugin.composeaudiocontrols.midi.MidiDeviceAccessScope);
    method @androidx.compose.runtime.Composable public static void MidiKeyboardMain(@NonNull org.androidaudioplugin.composeaudiocontrols.midi.MidiDeviceAccessScope, optional @Nullable androidx.compose.ui.graphics.ImageBitmap showControllerComboWithBitmap);
  }

  public final class MidiKnobControllerComboKt {
    method @androidx.compose.runtime.Composable public static void ControlTargetSelector(optional @NonNull androidx.compose.ui.Modifier modifier, int index, optional @NonNull java.util.List<org.androidaudioplugin.composeaudiocontrols.midi.ControlTargetDefinition> controlTargets, optional @NonNull kotlin.jvm.functions.Function1<? super java.lang.Integer,kotlin.Unit> onSelectionChange);
    method @androidx.compose.runtime.Composable public static void MidiKnobControllerCombo(@NonNull org.androidaudioplugin.composeaudiocontrols.midi.MidiDeviceAccessScope, @NonNull androidx.compose.ui.graphics.ImageBitmap knobBitmap);
    method @NonNull public static java.util.List<org.androidaudioplugin.composeaudiocontrols.midi.ControlTargetDefinition> getControlTargetCatalog();
    method @NonNull public static org.androidaudioplugin.composeaudiocontrols.midi.ControlSettings getMidi1Control();
    method @NonNull public static kotlin.ranges.IntRange getMidi1Range();
    method @NonNull public static kotlin.ranges.IntRange getMidi1Range14();
    method @NonNull public static org.androidaudioplugin.composeaudiocontrols.midi.ControlSettings getNoControl();
    method @NonNull public static org.androidaudioplugin.composeaudiocontrols.midi.ControlSettings getNoteControl();
    property @NonNull public static final java.util.List<org.androidaudioplugin.composeaudiocontrols.midi.ControlTargetDefinition> controlTargetCatalog;
    property @NonNull public static final org.androidaudioplugin.composeaudiocontrols.midi.ControlSettings midi1Control;
    property @NonNull public static final kotlin.ranges.IntRange midi1Range;
    property @NonNull public static final kotlin.ranges.IntRange midi1Range14;
    property @NonNull public static final org.androidaudioplugin.composeaudiocontrols.midi.ControlSettings noControl;
    property @NonNull public static final org.androidaudioplugin.composeaudiocontrols.midi.ControlSettings noteControl;
  }

  public final class MidiKnobControllerCombo_androidKt {
    method @androidx.compose.runtime.Composable public static void MidiKnobControllerCombo(@NonNull org.androidaudioplugin.composeaudiocontrols.midi.MidiDeviceAccessScope, @DrawableRes int drawableResId);
  }

}

