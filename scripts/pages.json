[{"name":"abstract val knobIsBeingDragged: Boolean","description":"org.androidaudioplugin.composeaudiocontrols.ImageStripKnobScope.knobIsBeingDragged","location":"compose-audio-controls/org.androidaudioplugin.composeaudiocontrols/-image-strip-knob-scope/knob-is-being-dragged.html","searchKeys":["knobIsBeingDragged","abstract val knobIsBeingDragged: Boolean","org.androidaudioplugin.composeaudiocontrols.ImageStripKnobScope.knobIsBeingDragged"]},{"name":"abstract val knobValue: Float","description":"org.androidaudioplugin.composeaudiocontrols.ImageStripKnobScope.knobValue","location":"compose-audio-controls/org.androidaudioplugin.composeaudiocontrols/-image-strip-knob-scope/knob-value.html","searchKeys":["knobValue","abstract val knobValue: Float","org.androidaudioplugin.composeaudiocontrols.ImageStripKnobScope.knobValue"]},{"name":"class ScalingPainter(image: ImageBitmap, srcOffset: IntOffset = IntOffset.Zero, srcSize: IntSize = IntSize(image.width, image.height), scale: Float = 1.0f) : Painter","description":"org.androidaudioplugin.composeaudiocontrols.ScalingPainter","location":"compose-audio-controls/org.androidaudioplugin.composeaudiocontrols/-scaling-painter/index.html","searchKeys":["ScalingPainter","class ScalingPainter(image: ImageBitmap, srcOffset: IntOffset = IntOffset.Zero, srcSize: IntSize = IntSize(image.width, image.height), scale: Float = 1.0f) : Painter","org.androidaudioplugin.composeaudiocontrols.ScalingPainter"]},{"name":"constructor(image: ImageBitmap, srcOffset: IntOffset = IntOffset.Zero, srcSize: IntSize = IntSize(image.width, image.height), scale: Float = 1.0f)","description":"org.androidaudioplugin.composeaudiocontrols.ScalingPainter.ScalingPainter","location":"compose-audio-controls/org.androidaudioplugin.composeaudiocontrols/-scaling-painter/-scaling-painter.html","searchKeys":["ScalingPainter","constructor(image: ImageBitmap, srcOffset: IntOffset = IntOffset.Zero, srcSize: IntSize = IntSize(image.width, image.height), scale: Float = 1.0f)","org.androidaudioplugin.composeaudiocontrols.ScalingPainter.ScalingPainter"]},{"name":"fun DefaultKnobTooltip(modifier: Modifier = Modifier, showTooltip: Boolean, value: Float, textColor: Color = Color.Gray)","description":"org.androidaudioplugin.composeaudiocontrols.DefaultKnobTooltip","location":"compose-audio-controls/org.androidaudioplugin.composeaudiocontrols/-default-knob-tooltip.html","searchKeys":["DefaultKnobTooltip","fun DefaultKnobTooltip(modifier: Modifier = Modifier, showTooltip: Boolean, value: Float, textColor: Color = Color.Gray)","org.androidaudioplugin.composeaudiocontrols.DefaultKnobTooltip"]},{"name":"fun DiatonicKeyboard(noteOnStates: List<Int> = List(128) { 0 }, modifier: Modifier = Modifier, onNoteOn: (note: Int, reserved: Long) -> Unit = { _,_ -> }, onNoteOff: (note: Int, reserved: Long) -> Unit = { _,_ -> }, startOctaveFromZero: Int = 5, numWhiteKeys: Int = 14, whiteKeyWidth: Dp = 30.dp, blackKeyHeight: Dp = 35.dp, totalWidth: Dp? = whiteKeyWidth * numWhiteKeys, totalHeight: Dp = 60.dp, whiteNoteOnColor: Color = Color.Cyan, blackNoteOnColor: Color = whiteNoteOnColor, whiteKeyColor: Color = Color.White, blackKeyColor: Color = Color.Black)","description":"org.androidaudioplugin.composeaudiocontrols.DiatonicKeyboard","location":"compose-audio-controls/org.androidaudioplugin.composeaudiocontrols/-diatonic-keyboard.html","searchKeys":["DiatonicKeyboard","fun DiatonicKeyboard(noteOnStates: List<Int> = List(128) { 0 }, modifier: Modifier = Modifier, onNoteOn: (note: Int, reserved: Long) -> Unit = { _,_ -> }, onNoteOff: (note: Int, reserved: Long) -> Unit = { _,_ -> }, startOctaveFromZero: Int = 5, numWhiteKeys: Int = 14, whiteKeyWidth: Dp = 30.dp, blackKeyHeight: Dp = 35.dp, totalWidth: Dp? = whiteKeyWidth * numWhiteKeys, totalHeight: Dp = 60.dp, whiteNoteOnColor: Color = Color.Cyan, blackNoteOnColor: Color = whiteNoteOnColor, whiteKeyColor: Color = Color.White, blackKeyColor: Color = Color.Black)","org.androidaudioplugin.composeaudiocontrols.DiatonicKeyboard"]},{"name":"fun ImageStripKnob(modifier: Modifier = Modifier, drawableResId: Int, value: Float = 0.0f, valueRange: ClosedFloatingPointRange<Float> = 0f..1f, explicitSizeInDp: Dp? = null, minSizeInDp: Dp = defaultKnobMinSizeInDp, fineModeDelayMs: Int = 1000, tooltipColor: Color = Color.Gray, tooltip: ImageStripKnobScope.() -> Unit = {\n                       // by default, show tooltip only when it is being dragged\n                       DefaultKnobTooltip(\n                           value = knobValue,\n                           showTooltip = knobIsBeingDragged,\n                           textColor = tooltipColor\n                       )\n                   }, onValueChange: (value: Float) -> Unit = {})","description":"org.androidaudioplugin.composeaudiocontrols.ImageStripKnob","location":"compose-audio-controls/org.androidaudioplugin.composeaudiocontrols/-image-strip-knob.html","searchKeys":["ImageStripKnob","fun ImageStripKnob(modifier: Modifier = Modifier, drawableResId: Int, value: Float = 0.0f, valueRange: ClosedFloatingPointRange<Float> = 0f..1f, explicitSizeInDp: Dp? = null, minSizeInDp: Dp = defaultKnobMinSizeInDp, fineModeDelayMs: Int = 1000, tooltipColor: Color = Color.Gray, tooltip: ImageStripKnobScope.() -> Unit = {\n                       // by default, show tooltip only when it is being dragged\n                       DefaultKnobTooltip(\n                           value = knobValue,\n                           showTooltip = knobIsBeingDragged,\n                           textColor = tooltipColor\n                       )\n                   }, onValueChange: (value: Float) -> Unit = {})","org.androidaudioplugin.composeaudiocontrols.ImageStripKnob"]},{"name":"fun ImageStripKnob(modifier: Modifier = Modifier, imageBitmap: ImageBitmap, value: Float = 0.0f, valueRange: ClosedFloatingPointRange<Float> = 0f..1f, explicitSizeInDp: Dp? = null, minSizeInDp: Dp = defaultKnobMinSizeInDp, fineModeDelayMs: Int = 1000, tooltipColor: Color = Color.Gray, tooltip: ImageStripKnobScope.() -> Unit = {\n             // by default, show tooltip only when it is being dragged\n             DefaultKnobTooltip(\n                 value = knobValue,\n                 showTooltip = knobIsBeingDragged,\n                 textColor = tooltipColor\n             )\n         }, onValueChange: (value: Float) -> Unit = {})","description":"org.androidaudioplugin.composeaudiocontrols.ImageStripKnob","location":"compose-audio-controls/org.androidaudioplugin.composeaudiocontrols/-image-strip-knob.html","searchKeys":["ImageStripKnob","fun ImageStripKnob(modifier: Modifier = Modifier, imageBitmap: ImageBitmap, value: Float = 0.0f, valueRange: ClosedFloatingPointRange<Float> = 0f..1f, explicitSizeInDp: Dp? = null, minSizeInDp: Dp = defaultKnobMinSizeInDp, fineModeDelayMs: Int = 1000, tooltipColor: Color = Color.Gray, tooltip: ImageStripKnobScope.() -> Unit = {\n             // by default, show tooltip only when it is being dragged\n             DefaultKnobTooltip(\n                 value = knobValue,\n                 showTooltip = knobIsBeingDragged,\n                 textColor = tooltipColor\n             )\n         }, onValueChange: (value: Float) -> Unit = {})","org.androidaudioplugin.composeaudiocontrols.ImageStripKnob"]},{"name":"interface ImageStripKnobScope","description":"org.androidaudioplugin.composeaudiocontrols.ImageStripKnobScope","location":"compose-audio-controls/org.androidaudioplugin.composeaudiocontrols/-image-strip-knob-scope/index.html","searchKeys":["ImageStripKnobScope","interface ImageStripKnobScope","org.androidaudioplugin.composeaudiocontrols.ImageStripKnobScope"]},{"name":"open override val intrinsicSize: Size","description":"org.androidaudioplugin.composeaudiocontrols.ScalingPainter.intrinsicSize","location":"compose-audio-controls/org.androidaudioplugin.composeaudiocontrols/-scaling-painter/intrinsic-size.html","searchKeys":["intrinsicSize","open override val intrinsicSize: Size","org.androidaudioplugin.composeaudiocontrols.ScalingPainter.intrinsicSize"]},{"name":"val defaultKnobMinSizeInDp: Dp","description":"org.androidaudioplugin.composeaudiocontrols.defaultKnobMinSizeInDp","location":"compose-audio-controls/org.androidaudioplugin.composeaudiocontrols/default-knob-min-size-in-dp.html","searchKeys":["defaultKnobMinSizeInDp","val defaultKnobMinSizeInDp: Dp","org.androidaudioplugin.composeaudiocontrols.defaultKnobMinSizeInDp"]}]
